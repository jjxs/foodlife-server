"""
Django settings for web project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^3ej^_x-z_h#j&-x*-cap_ewa-s&iwl9un$$0b@!jis4v@im@6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', '192.168.2.112', '192.168.100.172','192.168.100.173', '127.0.0.1', '126.15.239.241', 'ec2-13-113-154-86.ap-northeast-1.compute.amazonaws.com']


# Application definition


INSTALLED_APPS = [
    'master.apps.MasterConfig',      # Master管理界面（pc)
    'restaurant.apps.ApiRestaurantConfig',  # 饭店管理（pc,pad)
    'guest.apps.ApiGuestConfig',  # 客人（smart phone)
    'groupbuy.apps.ApiGroupbuyConfig',  # 团购
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'app.apps.AppConfig',
    'app_store.apps.AppStoreConfig',
]

MIDDLEWARE = [
    'app.middlewares.Mac',
    'common.middleware.mobile.MobileDetectionMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Cross　Domain 問題解決
    'common.middleware.exception.ExceptionMiddleware',
    'common.middleware.authenticate.AuthenticateMiddleware',
]

ROOT_URLCONF = 'web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# TEMPLATE_LOADERS = [
#     'django.template.loaders.filesystem.Loader',
#     'django.template.loaders.app_directories.Loader'
# ]

WSGI_APPLICATION = 'web.wsgi.application'


# Databaseƒ
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases


#本番
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'ami',
#         'USER': 'postgres1',
#         'PASSWORD': 'Skydesk#2018',
#         'HOST': 'skydestprod01.clt8cpnkgvi8.ap-northeast-1.rds.amazonaws.com',
#         'PORT': '5432',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'test02',
        'USER': 'postgres',
        'PASSWORD': '1122aaBB',
        # 'HOST': '127.0.0.1',
        'HOST': 'food-life-co-jp-001.chkiiswgqiz5.ap-northeast-1.rds.amazonaws.com',
        'PORT': '5432',
    },
    'ami': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'test02',
        'USER': 'postgres',
        'PASSWORD': '1122aaBB',
        # 'HOST': '127.0.0.1',
        'HOST': 'food-life-co-jp-001.chkiiswgqiz5.ap-northeast-1.rds.amazonaws.com',
        'PORT': '5432',
    },
    'saas-manage': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'saas-manage',
        'USER': 'postgres',
        'PASSWORD': '1122aaBB',
        # 'HOST': '127.0.0.1',
        'HOST': 'food-life-co-jp-001.chkiiswgqiz5.ap-northeast-1.rds.amazonaws.com',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, '/static/')

LOGIN_URL = '/admin/login'

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#         'LOCATION': 'unique-snowflake',
#         # 'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
#     }
# }

LOGGING = {
    'version': 1,  # これを設定しないと怒られる
    'formatters': {  # 出力フォーマットを文字列形式で指定する
        'all': {  # 出力フォーマットに`all`という名前をつける
            'format': '\t'.join([
                "[%(levelname)s]",
                "asctime:%(asctime)s",
                "module:%(module)s",
                "message:%(message)s",
                "process:%(process)d",
                "thread:%(thread)d",
            ])
        },
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(server_time)s] module:%(module)s  %(message)s a',
        },
    },
    'handlers': {  # ログをどこに出すかの設定
        'file': {  # どこに出すかの設定に名前をつける `file`という名前をつけている
            'level': 'DEBUG',  # DEBUG以上のログを取り扱うという意味
            'class': 'logging.FileHandler',  # ログを出力するためのクラスを指定
            'filename': os.path.join(BASE_DIR, 'django.log'),  # どこに出すか
            'formatter': 'all',  # どの出力フォーマットで出すかを名前で指定
        },
        'console': {  # どこに出すかの設定をもう一つ、こちらの設定には`console`という名前
            'level': 'DEBUG',
            # こちらは標準出力に出してくれるクラスを指定
            'class': 'logging.StreamHandler',
            'formatter': 'all'
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
    },
    'loggers': {  # どんなloggerがあるかを設定する
        # 'django.db.backends': {
        #     'handlers': ['console'],
        #     'level': 'DEBUG'
        # },
        # 'django.server': {
        #     'handlers': ['django.server'],
        #     'level': 'INFO',
        #     'propagate': False,
        # },
        'common': {  # common とアプリの名称必要がある
            # 'handlers': ['file', 'console'],  # 先述のfile, consoleの設定で出力
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# JWT認証関連
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
    'NON_FIELD_ERRORS_KEY': 'detail',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    # 'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
}

JWT_AUTH = {
    'JWT_VERIFY_EXPIRATION': False,  # 無限時間
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_PAYLOAD_HANDLER': 'app.auth.token.jwt_payload_handler',
}

# Cross-Origin
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

# 起動する前にキャッシュをクリアする
from django.core.cache import cache
cache.set('sql_data', None)
cache.clear()

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            #"hosts": [('13.230.237.167', 6379)],
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}


# SQL_PATH
SQL_TEMPLATE_PATH = os.path.join(BASE_DIR, 'sql')
# イメージファイルリミットサイズ(kB)
LIMIT_SIZE = 50


SITE_NAME  = "local-test"
SITE_IMAGE_HOST = "https://foodlife.s3-ap-northeast-1.amazonaws.com"


